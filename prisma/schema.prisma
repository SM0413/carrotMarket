// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                  Int             @id @default(autoincrement())
  name                String?
  phone               String?         @unique
  email               String?         @unique
  avatar              String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  tokens              Token[]
  Product             Product[]
  fav                 Fav[]
  posts               Post[]
  answer              Answer[]
  wondering           Wondering[]
  writtenReviews      Review[]        @relation(name: "writtenReviews")
  receivedReviews     Review[]        @relation(name: "receivedReviews")
  sale                Sale[]
  purchase            Purchase[]
  stream              Stream[]
  messages            Message[]
  sellerTalk          TalkToSeller[]  @relation(name: "sellerTalk")
  buyerTalk           TalkToSeller[]  @relation(name: "buyerTalk")
  carrotseller        isCarrot[]      @relation(name: "carrotseller")
  carrotbuyer         isCarrot[]      @relation(name: "carrotbuyer")
  carrotcommentbuyer  CarrotComment[] @relation(name: "carrotcommentbuyer")
  carrotcommentseller CarrotComment[] @relation(name: "carrotcommentseller")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  image         String          @db.Text
  name          String
  price         Int
  description   String          @db.MediumText
  fav           Fav[]
  sale          Sale[]
  purchase      Purchase[]
  talktoseller  TalkToSeller[]
  isCarrot      isCarrot[]
  carrotComment CarrotComment[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
  cloudflareId  String
  cloudflareURL String
  cloudflareKey String
  coverImg      String    @default("")
}

model Message {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  message        String        @db.MediumText
  stream         Stream?       @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId       Int?
  talktoseller   TalkToSeller? @relation(fields: [talktosellerId], references: [id], onDelete: Cascade)
  talktosellerId Int?
}

model TalkToSeller {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  buyer           User       @relation(name: "buyerTalk", fields: [createdBuyerId], references: [id], onDelete: Cascade)
  createdBuyerId  Int
  seller          User       @relation(name: "sellerTalk", fields: [createdSellerId], references: [id], onDelete: Cascade)
  createdSellerId Int
  product         Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  messages        Message[]
  isbuy           Boolean?
  issold          Boolean?
  isCarrot        isCarrot[]
  isSell          Boolean    @default(false)
}

model isCarrot {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  meetTime       DateTime?
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  buyer          User         @relation(name: "carrotbuyer", fields: [carrotbuyerId], references: [id], onDelete: Cascade)
  carrotbuyerId  Int
  seller         User         @relation(name: "carrotseller", fields: [carrotsellerId], references: [id], onDelete: Cascade)
  carrotsellerId Int
  tts            TalkToSeller @relation(fields: [ttsId], references: [id], onDelete: Cascade)
  ttsId          Int
}

model CarrotComment {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  meetTime              DateTime?
  product               Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             Int
  buyer                 User      @relation(name: "carrotcommentbuyer", fields: [carrotcommentbuyerId], references: [id], onDelete: Cascade)
  carrotcommentbuyerId  Int
  seller                User      @relation(name: "carrotcommentseller", fields: [carrotcommentsellerId], references: [id], onDelete: Cascade)
  carrotcommentsellerId Int
  buyerComment          String?
  sellerComment         String?
  starForBuyer          Int       @default(5)
  starForSeller         Int       @default(5)
  
}
